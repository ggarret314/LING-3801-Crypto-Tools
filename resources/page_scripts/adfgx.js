import { Alphabet, text_sanitize, WordFinder, TextFitness } from '../main.js';
import { Cipher } from '../cipher.js';
import { CipherDirection } from '../classes/cipherdirection.js';
import { FrequencyTable } from '../classes/frequencytable.js';
import { DecipheringContainer } from '../classes/decipheringcontainer.js';


const ADFGXCipher = {

}

var intercept = "AGXAGGAGDDGFXDGXXXFDDAGGDGGGADDGXAXFXDAAXDGGXDDXDXAGDGGGGAGXXADFGXGDGGAXDDAGAFDDDDGDGGAGAAGXAAAAAXXGGAFFXDGXGDGAGXAGGXGXGFAFDXDFFGDXDFXGAXDGDXGDGFAXGADDDXXAXAFGFGDGGGADDXXXXFGDGFDAADGDXDGFXDGDAGXGDDAAAGGGDGFDDADAGGXXDXDAAFDADDGAGXGDXADXGGAGDXXXXDADGXGDGXDGGDDGXDGXAGGAXGXGGAGGAAFGGDDDGFXXGDDFXAAFGAGDFGXAGXXGXGAAXGGDAGDXGFGAFXGDFXFGFFXGDXAAXDXXXGFGGAAAXGAADGFDXAAGXDAFGDADGFXXAADDGGDGDGFAADGAAAGXGXDAGAGAGGXXXAAFAFDDDADDXGGDDXDDAADGXAAGDDXGGDDDGDAXAXGFDDGAGAFGXGDFFXGDXAXXDGGDDXGGGAXAGAADGADDAAGGGGXFFDDDAFAGXXGFFDADGGAGGDXXAGXXDGDGGAFGXDDAFFAAGDAGXGFGGFXGXAXDADAADFDDDGFXADXGGGDFGDGDFGGDGADFXXFXFGGFDXFGDGGDGXAFFGAGGGDAAGDADAAAGADDDADDFAGXGXDGADGADGAFDAGGDGGAAXXXDXDGDDDDXAGGXXGGGAADGFAAGDXAXDFGGXXGGAXDFFAAADXDGAGGGGGAFGDXGAAFXAFGGDGDGGAXXXXXGAGGDGGADADXADAAGDGDGDGAGAGDXADDDDDDFDDDDXGGDXAGDXAGADDGDDXAGFXXFDGDDFDGFGXFGXXGXXXGFXAGGGAFGXDGAAGDXDDGDXDAXFDGAXFFGFFDGDDAGGXDGGGAAXDDADDDXXFDGDXGFAAFAXAGFAFGGFFAGGAGAAAXXGADAAGADFAXGDFGXGGXAGGGDDDFGDAGXGDFXGGGAGFGGDGAAGFXGXFDAXGDGXAAXDADXDDGDADDAADDDXGGGXFAFAXGAGXDFDADAGGGGAGAGDGAFAFADGGDAXGGFDDFGGDXDXFAAGGGGXGGXAADXDXDFADGGDFGDGGGGDDDGDDXAXAXGAAADGGAFGAGAGAGXAXFXFXXDAFDGAGXFGDAGAGGAAXXGAGGDXGFDXXGDGAGDDXGDFXGGDAXADXADFFAXFXADDGDGXGFGXFGGXGFADAXGXXFGAGGDGFADDDDAGDDAXGAGAAGGGFXGAADGDXGFGAGDXXGXGGDAAADXAFGDAGAXGGDDXGXAAGXAGGDADGGAADFXGXGDAXGGDGDGDGGGAAGGGAXGDAAFDFXGAGADGDAXXAAGGDAAXGAAGAGGDAGXGFDGDXXXFXXAAGDGAXDDDXXGAAAXAAGGGDGGDXXAXFAXADFGXFXDGDDXGXGAGFGAGXADXDGDFADGXXDFDXDAAGDDFXFGXGXDGXDDDGXXGFXGAFAXGDGGGGFAXGGGXXDFXAXGDDGXGGDAAAAGGGGGDFAFDAFAGDXDDFAXADXXXDDGGGDGAFGGAGADGXDDXGAAAGAFXDAGXGGDXDGADGDXAAGAAGGGAGAAAGADAFDAAFGGDXAGAXGGGGGADXXAAAGDXFDFGDGDAXGDAGGFFAGGAAGGXAAGFXAFGAXDDDGXADAFDXDFAADGAGGFFGAFAAGDXAGGFAGXFGFFGFAGAAXAXGXGAGAXXDDXAGGDXGGGXGGDADXGGAXFXDDXGFGGGFGGGXGXGDGDGXGADXXDGFXXFXGDAFFFGADFDAGAXXXGGADDFGFXAAGFGXDDGAGDGGGGDDXAAXAGGAAAGGAAGFDDGFAADAAGGAFDGGXGFDDAXDGXAGADFAGGAGGDADGFGXGFDADGFDGAAGAGDADFXDGXGAXXDAFGGGDAAAXADGGDGXFGXAXXGAADDADAAFXDGGGGAGGAAGDGDXDXGAXGXADAGDXDAXAXGGGGGFGXDXXXGDADDDFXGGGXXXDDXAGGDXDGXDAGAADGGDAGDDXFDDAXGFFADFXDXXDGDDDDGXGGGXAAGDDAAGGAGGFAGXGXDAGADGXAGGGDXAAXGAFFGDDADGGXAGADAADGADDGDGDGGDDDAGGXXXDGGAGGDGFDFGDGADADXDXGGFGGGDAAADAADGGAADAXDAAAAGGGGDAGFGADXDXGDFGDDGDGADAGDGXAFGGDDDDXXGGDXDDDADGGXGGAAAAXXAFGXGDDXAXDGGXFGGGAAXAXFXAFXFDXFGAXGXGGDFGAGAGGGDGAGAXADXDDAAGXADGDGADGXXGXDXAGAFGXGFXFGDGAGAFAGADXFXGDGAXXGDDDGGFAGXADDGGXXGGXAGDAXAAGAFAGFFXDGADXDAAAFGGGFGDADGGGDAGDXXDGAXADGXDFDFDGDDGGGAAFGAAADDFAAAAAAGGDFGFGXXXGXGAFAGDGXFGFGDADXGGGGFDGADGDGXXDXADAAADDDDGXGAFDDGGAGFAGADDAGGAGDGFXGGDXXGFXDGFXXGAAXAADGGGDDDDXAGXDGGAGAGGADGXGAXFGADGDXXAGGXXAGDXADDAAXDGXDADXGAGGDDGADDDDAGGDFFAGADGAGAFAGGGAFGDADDXGAGDGGGADXDXXDAGXAXDDDAXGAGDXFGGGXGGXAAXFXGGDADGDGADFGGXGDGDAAGADDGAADDXGXFDGDDAXGXGAGGXADXGAGGGGDAXDADXDDGGGDDGDDXAGXGAFXDDDGADXXDXFFAXXAAGGDDADDAAXAFAXGAGGDGGDDAXGADGXDADFDXGFDDAGDGGAAADFGADGGGGGDGXDAAADXXAAGDAXGGGXDGFXXXDAGGGGDDGAADDGGXGFGGAXDGFXDGGGDXGDFGXFGGGAFFDAGAAXGGGAAXDGGXAFGGAGDGGDGAGGXXXDDAXDDGGGAAGGGXXDDAXXADADDXGGXGFGADGAGGAGDADDXFXXDDXDXDFGGGXGGXXAFDXADXDXXFADAGXGXAGDAGAGDADADADDAGFXFDXAGFAGGGDDXDDXAGXGGGDGAGAAAXGGGGAXGAGXGFGFGADGFDAGGXXXXAAXGAXXXDDXDGGGAGDGGDDGADXDDXGXGDGXGXGGFAFGADGGAGXGDAAFXGGXGDGADAGGFAFDAAAGXGXDGAFXDFAXGGDXXGGDAGDGXGGAADDDXXFFGDADADDXGFXGGFXDDXXXAXDGGGXDGXADDAAAAADGGGGAXGDXXAGFGDDDDGXAGGGDGDAXAXGAGADDAFGXDXGGFGGAAADDGDGFDXDXDAGAGGGGFAAXFFDXXGXAGFGXFGAXDGDDGAAAXGGGGDDDAGAAGXXFXGGAGGDAXXDAXFFDDFFAGGGXGDFFGAGAGAXDXADDGGGFDDDADXAAAGDGXFDGDDXADDGFAFGGFXDAAAAGDAFFFAXDADGADDGFGXADXGDXDAGDAGFADGXGDAXAFGXFFDGFADXGGGDAAGXAAGFFADAGAGGDFFAFXAGDGAXAGAGXDAFADDAAXGAGDFGXDDXGXXDXAXDGDGDGGGXGAGDAXDAFAGXDDGXFAGFGXXDFXDDAAAXFAGDAGGXAXAAGGDAFDFAAAAGDADAGDAGGDDGADGXGDAGDDDGGGXGXGAXADFGADXDGDGAXADAGXFGDADDAAADDXGGFAAGDDXGAGAGFGADXFFADXAGXFDGXGDGGGDDDGAAXDGAADAFGAGADFGFFXDAXAGDAAGXDAFDGFDXAXADGXDGGGGADXFDAGDGGFDGFGDAGAXGAGDAGDAFAXGXGDXFFADAGGDADGXGAGFDAXDDAGDDGGDFAADADGXGAGDAXGXFADAAXAGFGDDFGADDADXGAAGXAGADGAGADAXGAGFDDGGDAGGAGGDGAXGGAGGADGGGAGDXXADGFXDGDGXFGXDDXDGGFXAGGAGGDGGXDGGXXGAAADGDAGGDDGGAFADGAXDGAADFFXDGGDXGDGGXAGGGAGDGAAAAAGGDAFGDAXFDXDDGXGGGGAAGAXAXGDDDDADADDDDGDDGGAGDAXGAGGGFGGGFDGGDAGFXAADGGGGGGXGXXXGXGGXADAGDXXDDGDDADAGXXGFGGGDDGDADXGAAFAGFAAAFDAAGDAGDFFFDDAGGGDGADGAXXGGAAADGGAAFDDXAFDFAADAXAGGGDFGDXDGGAGAXGAGGXDDAGGXDGGFGXDXAAGADGGFFAAXAXAADGDGAGGADXDFXXDGXDAXDGXGGGDGDAAAAGAAGDFDAAAXDDDFAAGGDAAADDDGAFDXGDAFGGGDGADAAXDXFGDDAXGDXAGFDDGFAXXGAXAAXXXGXFGXGAFXGFGXDFGXDDXAXADXDGGDGFXGADXAAGGGGGGGGAXGGDXDADGDGDGAXDXXGXDGGDXADADFFXGDGDFFGXAAAXDDADFGGGDFAXXAAGAGGDGAGGGGGXDGGXXADXXGADDAGDGGXAGGXAGGAXXGDAXFDDAAXAGGGGGFFAAXGXDAAXFXAGGDXXFFFAXGGGAXDGXAAGGAGGDGDADGDAXFAAGAADGFGAGADADADAAGDDADGGGDDGGXADAFGDDDGGGGFGXDGAAGXGDXDDGADADDDXGXGDAADXFXGGGDDXDGAAGGGXADDGAAGGXGAAAAXGXGDFDDDDDGDDGDXGAFXAAAAADGDGGFFGAFXXGFDGXDDAXDGGGDFGGXDAGXAAFXAAGGFGXDAAGGAGDXAGXGAGFFXGXGAXAADAGADDDDGXAXGAAFAGDAGGFFXGAXDXFDXGDGGGDFXGGXGAGDADFGAGGXXGGFAAFGXADAGDADDGDGGFDADXGFGGGFAAXDGXDDAGAGAGDGAAFFAGGADDAGAAFXGGGFADGADAFFDXAFGDXDADGGGGGGDAGXDAXGDDXGFGGDXAADDAAGGFGGGGFXGXDDFXDXXDGFXGADGAXGAGGXGDDDXXDXDXDGDDDGAGDXGXADXGGGGDGDDDAAXAFDGFDDAXDGGAGFGGXXGXFDXAXFAXDXGGFFXXGAAXGGFAGDGAGDFXGXGDGDDAFGGXGGGAAAXAAGGGAAGADXXFGDGADDGXAXAGGADAGFAAXGADXAGXAGFGFFDGXGGGAGFGADXAAAFAGXXFAXGAAGDXGXAXDFGADDAXGDDGXGGXXAXGXGDGDADXXDGGGDAGGXFAAGDGGFGDXDGDGXXAXXDADGFFAXAGAGXGFFADXGADAAADAGAGDGXGGAXAXXAAFDGGGDDXGGDGDFGXXDAGDDAAXDAAGGGFXFAAXGAXXGFDAGGGGAGGXAXAGXXDDFGDGGGAXGGGDXGGAXAGAGDGDDDGADDXGGDDGGGAAFDXAAADGXDFDGAXGXGGXAXDGAGGGGDDGGDGDXDDADADFGDGGGAFAGXXGGDDDAXAGAADGX";

var bestKey = "",
	bestFitness = -999999999999999999999;



var letters = ['A', 'A', 'A', 'A', 'A'];
var letterCount = letters.length;
var count = 0;

console.log("best solution: ", Cipher.other.adfgx._decipher('IUQSABCDEFGHKLMNOPRTVWXYZ|DBGACEFH', intercept));

/*
while (count < Math.pow(26, letterCount)) {
	var pt = Cipher.other.adfgx._decipher(Cipher.other.adfgx._getFullKey(letters.join('') + "|DBGACEFH"), intercept);
	var fitness = TextFitness._calcFitness(pt);
	if (fitness > bestFitness) {
		
		bestFitness = fitness;
		bestKey = Cipher.other.adfgx._getFullKey(letters.join('') + "|DBGACEFH");
		console.log("best fitness: ", bestKey, bestFitness);
	}
	count++;
	letters[0] = Alphabet[(Alphabet.indexOf(letters[0]) + 1) % 26];
	var i = 0;
	while (letters[i] == 'A' && i < letterCount) {
		i++;
		letters[i] = Alphabet[(Alphabet.indexOf(letters[i]) + 1) % 26];

	}
}
*/
console.log('Finished');
// DBGACEFH

var poop = Cipher.other.adfgx._encipher("ABCDEFGHIKLMNOPQRSTUVWXYZ|BADC", text_sanitize("This is the true test to see how well this thing can do without having an even column countx"));

//console.log(poop);



//console.log(Cipher.other.adfgx._decipher("ABCDEFGHIKLMNOPQRSTUVWXYZ|BADC", poop));

//console.log(Cipher.other.adfgx._decipher("PHQGMEAYNOFDXKRCVSZWBUTIL|CBFDAE", "XFDDDDFAFGXG"));